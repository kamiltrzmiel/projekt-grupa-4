{"mappings":"oeAAAA,EAAA,S,sBCAA,IAAAC,EAAAD,EAAA,S,iBCIO,MAAME,EAAa,ICJnB,MAELC,GAAU,GAGVC,cACE,MAAMD,EAASE,KAAKC,MAAMC,aAAaC,QAAQ,WACrCC,MAAKN,EAAfA,GAAmD,EACrD,CAGAO,WAAWC,EAAOC,EAAOC,GACvBF,EAAME,KAAOA,EACb,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChC,IAAKF,EAAME,GAAGE,KAAQL,EAAMK,GAAI,CAC9B,GAAIJ,EAAME,GAAGD,OAASA,EACpB,OAIF,OAFAJ,MAAKN,EAAQW,GAAGD,KAAOA,OACvBN,aAAaU,QAAQ,SAAUZ,KAAKa,UAAUT,MAAKN,GAErD,CAEFM,MAAKN,EAAQgB,KAAKR,GAClBJ,aAAaU,QAAQ,SAAUZ,KAAKa,UAAUT,MAAKN,GACrD,CAGAiB,SAASC,EAASR,GAUhB,MATc,CACZG,GAAIK,EAAQL,GACZM,MAAOD,EAAQC,MACfC,YAAaF,EAAQE,YACrBC,aAAcH,EAAQG,aACtBC,aAAcJ,EAAQI,aACtBC,UAAWL,EAAQM,OAAOC,KAAIC,GAASA,EAAMb,KAC7CH,KAAMA,EAGV,GD7BIiB,EAAYC,MAAOC,EAAMnB,KAC7BoB,QAAQC,IAAIF,GACZ,MAAMG,QAAa,EAAAC,EAAAC,WACnB,GAAKF,EAEE,CACL,MAAMG,EAAapC,EAAWkB,SAASY,EAAMnB,GAC7CoB,QAAQC,IAAII,IACZ,EAAAF,EAAAG,qBAAoBD,EAAYH,GAChCK,MAAM,kBAAkB3B,kBAC1B,MANE2B,MAAM,qBAMR,EAGWC,EAAkBT,IAC7B,MAAMU,EAAWC,SAASC,eAAe,iBACnCC,EAAWF,SAASC,eAAe,eACzCF,EAASI,iBAAiB,SAASf,eAAkBD,EAAUE,EAAM,aACrEa,EAASC,iBAAiB,SAASf,eAAkBD,EAAUE,EAAM,aD1BjDW,SAASC,eAAe,WAGhCE,iBAAiB,SAASC,IACtC,MAAMC,EAAiBL,SAASC,eAAe,kBAGxBb,OAAMf,IAC3B,IACE,MACMiC,SADiBhD,EAAAiD,QAAIC,eAAenC,IACpBgB,KACtBC,QAAQC,IAAIe,GACZ,MAAMtB,EAASsB,EAAKtB,OAAOC,KAAIjB,GAASA,EAAMyC,OAAMC,KAAK,MAEzDJ,EAAK1B,YACA0B,EAAK1B,YAAc,mCAAmC0B,EAAK1B,cAC3D0B,EAAK1B,YAAc+B,YACxBN,EAAeO,UAAY,6NAKYN,EAAK1B,0CAC1C0B,EAAK3B,0KAIkC2B,EAAK3B,iSAKK2B,EAAKzB,aAAagC,QAAQ,+EAClBP,EAAKQ,uQAKfR,EAAKS,WAAWF,QAAQ,sOAIxBP,EAAKU,yOAILhC,+RAK/BsB,EAAKW,kZAUKjB,SAASC,eAAe,cAChCE,iBAAiB,SAAS,IAAME,EAAea,UACnEpB,EAAgBQ,EAGlB,CAFE,MAAOa,GACP7B,QAAQC,IAAI4B,EACd,GAEFX,CA/DWJ,EAAEgB,OAAOC,WAAWC,QAAQjD,IAgEvCgC,EAAekB,WAAS","sources":["src/index.js","src/js/services/detailModal.js","src/js/services/setModalButtnos.js","src/js/services/userMovies.js"],"sourcesContent":["import './js/main';\nimport './sass/main.scss';\nimport './js/keyword_searcher';\nimport './js/services/pagination';\nimport './js/services/detailModal';\n","import api from './api';\nconst renderElement = document.getElementById('posters');\nimport { setModalButtons } from './setModalButtnos';\n\nrenderElement.addEventListener('click', e => {\n  const detailDialogEl = document.getElementById('modal-backdrop');\n  const id = e.target.parentNode.dataset.id;\n\n  const fetchMovieById = async id => {\n    try {\n      const response = await api.fetchMovieById(id);\n      const item = response.data;\n      console.log(item);\n      const genres = item.genres.map(movie => movie.name).join(', ');\n\n      item.poster_path\n        ? (item.poster_path = `https://image.tmdb.org/t/p/w500/${item.poster_path}`)\n        : (item.poster_path = placeholder);\n      detailDialogEl.innerHTML = `<div class=\"container\">\n      <div id=\"modal-wrapper\" class=\"modal\">\n       <button id=\"hide-modal\" class=\"footer-modal__closeBtn\">\n              x\n            </button>\n                <img id=\"modal-image\" src=\"${item.poster_path}\" class=\"modal__image\" alt=\"${\n        item.title\n      }\" />\n                <div id=\"modal-text\" class=\"modal__text\">\n                  <div class=\"modal__description\">\n                    <h3 class=\"modal__title\">${item.title}</h3>\n                  </div>\n                  <div id=\"modal-info\" class=\"modal__info\">\n                    <p class=\"modal__info--classification\">Vote / Votes</p>\n                    <p class=\"modal__info--detailed\">\n                      <span class=\"modal__info--score\">${item.vote_average.toFixed(1)}</span> /\n                      <span class=\"modal__info--score--second\">${item.vote_count}</span>\n                    </p>\n                  </div>\n                  <div id=\"modal-info\" class=\"modal__info\">\n                    <p class=\"modal__info--classification\">Popularity</p>\n                    <p class=\"modal__info--detailed\">${item.popularity.toFixed(0)}</p>\n                  </div>\n                  <div id=\"modal-info\" class=\"modal__info\">\n                    <p class=\"modal__info--classification\">Original title</p>\n                    <p class=\"modal__info--detailed\">${item.original_title}</p>\n                  </div>\n                  <div id=\"modal-info\" class=\"modal__info\">\n                    <p class=\"modal__info--classification\">Genre</p>\n                    <p class=\"modal__info--detailed\">${genres}</p>\n                  </div>\n                  <article id=\"modal-article\" class=\"modal__article\">\n                    <h4 class=\"modal__article--title\">ABOUT</h4>\n                    <p id=\"modal-article-description\" class=\"modal__article--description\">\n                      ${item.overview}\n                    </p>\n                  </article>\n                  <div class=\"modal__buttons\">\n                    <button id=\"modal-watched\" class=\"modal__btn--watched\">ADD TO WATCHED</button>\n                    <button id=\"modal-queue\" class=\"modal__btn--queued\">ADD TO QUEUE</button>\n                  </div>\n                </div>\n              </div>\n            </div>`;\n      const closeDetailModalBtn = document.getElementById('hide-modal');\n      closeDetailModalBtn.addEventListener('click', () => detailDialogEl.close());\n      setModalButtons(item);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  fetchMovieById(id);\n  detailDialogEl.showModal();\n});\n","import { UserMovies } from './userMovies';\nimport { getUser, saveMovieToDatabase } from './firebase';\n\n//tworzy nowy obiekt który ma w sobie dane i medoty związane z bazą danych\nexport const userMovies = new UserMovies();\n\n//Funkcja pobiera z dokumentu przyciski dodania do obejrzanych i do kolejki oraz przypisuje im funkcje w eventListnerach\n//Funkcja przyjmuje jako argument obiekt - w domyśle dane pobrane z TMDB dane jednego filmu\n//dlatego najlepiej dorzucić ją do funkcji tworzenia Modala która powinna operować na tym samym obiekcie.\n\nconst saveMovie = async (data, type) => {\n  console.log(data);\n  const user = await getUser();\n  if (!user) {\n    alert('Please first login');\n  } else {\n    const dataToSave = userMovies.addMovie(data, type);\n    console.log(dataToSave);\n    saveMovieToDatabase(dataToSave, user);\n    alert(`Movie saved to ${type} successfully!`);\n  }\n};\n\nexport const setModalButtons = data => {\n  const watchBtn = document.getElementById('modal-watched');\n  const queueBtn = document.getElementById('modal-queue');\n  watchBtn.addEventListener('click', async () => await saveMovie(data, 'watched'));\n  queueBtn.addEventListener('click', async () => await saveMovie(data, 'queued'));\n};\n","export class UserMovies {\n  //tablica w której przechowywane są filmy zapisane przez użytkownika\n  #movies = [];\n\n  //konstruktor pobiera z localStorage dane i zapisuje je do tablicy, jeśli ich nie ma tworzy pustą tablicę.\n  constructor() {\n    const movies = JSON.parse(localStorage.getItem('movies'));\n    movies ? (this.#movies = movies) : (this.#movies = []);\n  }\n\n  //metoda sprawdza czy dany film nie jest już w localStorage zmienia mu typ w zależności od potrzeby oraz jeśli warunki są odpowiednie wrzuca go do local storage.\n  checkMovie(movie, array, type) {\n    movie.type = type;\n    for (let i = 0; i < array.length; i++) {\n      if (+array[i].id === +movie.id) {\n        if (array[i].type === type) {\n          return;\n        }\n        this.#movies[i].type = type;\n        localStorage.setItem('movies', JSON.stringify(this.#movies));\n        return;\n      }\n    }\n    this.#movies.push(movie);\n    localStorage.setItem('movies', JSON.stringify(this.#movies));\n  }\n\n  //metoda dodaje podstawowe informacje o filmie do bazy danych;\n  addMovie(element, type) {\n    const movie = {\n      id: element.id,\n      title: element.title,\n      poster_path: element.poster_path,\n      vote_average: element.vote_average,\n      release_date: element.release_date,\n      genre_ids: element.genres.map(genre => genre.id),\n      type: type,\n    };\n    return movie;\n  }\n}\n"],"names":["parcelRequire","$c7JiP","$c4766275f973f488$export$83a582a285a10597","movies","constructor","JSON","parse","localStorage","getItem","this","checkMovie","movie","array","type","i","length","id","setItem","stringify","push","addMovie","element","title","poster_path","vote_average","release_date","genre_ids","genres","map","genre","$c4766275f973f488$var$saveMovie","async","data","console","log","user","$7zgG6","getUser","dataToSave","saveMovieToDatabase","alert","$c4766275f973f488$export$571b98310cbd3364","watchBtn","document","getElementById","queueBtn","addEventListener","e","detailDialogEl","item","default","fetchMovieById","name","join","placeholder","innerHTML","toFixed","vote_count","popularity","original_title","overview","close","error","target","parentNode","dataset","showModal"],"version":3,"file":"index.edb88533.js.map"}